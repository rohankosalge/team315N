from tkinter import *
from math import floor

# fonts
TABLE_FONT = ("Ubuntu", 12, "bold")

master = Tk()
master.title("VEX 2020-21 Change Up Head-to-Head Scoring")

scores_canvas = Canvas(master, height=840, width=1200, bd=0, highlightthickness=0, bg="white")
scores_canvas.grid(row=0, column=0)

final_score_canvas = Canvas(master, height=60, width=1200, bd=0, highlightthickness=0, bg="white")
final_score_canvas.grid(row=1, column=0)

teams = ["Red A", "Red B", "Blue A", "Blue B"]
team_colors = ["red", "blue"]
totals_texts = ["Red Alliance Total: ", "Blue Alliance Total: "]

field = [[[None, None, None], [None, None, None], [None, None, None], [None, None, None], [None, None, None], [None, None, None], [None, None, None], [None, None, None], [None, None, None]],
         [[None, None, None], [None, None, None], [None, None, None], [None, None, None], [None, None, None], [None, None, None], [None, None, None], [None, None, None], [None, None, None]],
         [[None, None, None], [None, None, None], [None, None, None], [None, None, None], [None, None, None], [None, None, None], [None, None, None], [None, None, None], [None, None, None]],
         [[None, None, None], [None, None, None], [None, None, None], [None, None, None], [None, None, None], [None, None, None], [None, None, None], [None, None, None], [None, None, None]]]

goals = [[None, None, None, None, None, None, None, None, None],
         [None, None, None, None, None, None, None, None, None],
         [None, None, None, None, None, None, None, None, None],
         [None, None, None, None, None, None, None, None, None]]

owners = [[None, None, None],
          [None, None, None],
          [None, None, None]]

tops = [[None, None, None, None, None, None, None, None, None],
        [None, None, None, None, None, None, None, None, None],
        [None, None, None, None, None, None, None, None, None],
        [None, None, None, None, None, None, None, None, None]]


def draw():
    scores_canvas.delete('all')
    for x in range(3):
        for y in range(3):
            basey, basex = 400*x, 280*y
            for r in range(4):
                for c in range(4):
                    addx, addy = (140/3)*r, 100*c

                    if r == 0:
                        boxcolor = team_colors[floor(c/2)]
                        boxtext = teams[c]

                        scores_canvas.create_rectangle(basey+addy, basex+addx, basey+addy+100, basex+addx+(140/3), 
                                                fill=boxcolor)
                        scores_canvas.create_text(basey+addy+50, basex+addx+(70/3),
                                                text=boxtext, fill="white", font=TABLE_FONT)
                    else:
                        scores_canvas.create_rectangle(basey+addy, basex+addx, basey+addy+100, basex+addx+(140/3))

                        ball_color = field[c][(3*y)+x][r-1]
                        if ball_color == None:
                            ball_color = "white"
                        scores_canvas.create_oval(basey+addy+30, basex+addx+(10/3), basey+addy+70, basex+addx+(130/3),
                                                  width=2, fill=ball_color)
                    
            for r in range(4, 5):
                for c in range(2):
                    addx, addy = (140/3)*r, 200*c
                    
                    scores_canvas.create_rectangle(basey+addy, basex+addx, basey+addy+200, basex+addx+(140/3))
                    scores_canvas.create_text(basey+addy+100, basex+addx+(70/3), text=totals_texts[c],
                                       font=TABLE_FONT)

            for r in range(5, 6):
                scores_canvas.create_rectangle(basey, basex+(700/3), basey+400, basex+280)
                scores_canvas.create_text(basey+200, basex+(770/3), text=" Owns this goal",
                                   font=TABLE_FONT)

    for x in range(3):
        scores_canvas.create_line(0, 280*(x+1), 1200, 280*(x+1), width=3)
        scores_canvas.create_line(400*(x+1), 0, 400*(x+1), 1200, width=3)
            
                                            
draw()

global red_scoring_map
red_scoring_map = {"red":2, "blue":1, None:0}

global blue_scoring_map
blue_scoring_map = {"blue":2, "red":1, None:0}

class Goal:

    global red_scoring_map
    global blue_scoring_map

    def __init__(self, side, ball1, ball2, ball3, doubler):
        self.ball1 = ball1
        self.ball2 = ball2
        self.ball3 = ball3
        self.doubler = doubler  # if the robot is contacting the goal
        self.total = 0

        if side == "red":
            self.scoring_map = red_scoring_map
        else:
            self.scoring_map = blue_scoring_map

    def get_total(self):
        ball1pts = self.scoring_map[self.ball1]
        ball2pts = self.scoring_map[self.ball2]
        ball3pts = self.scoring_map[self.ball3]

        self.total = ball1pts + ball2pts + ball3pts

        if self.doubler:
            self.total*=2

        return self.total

def ownership(redAgoal, redBgoal, blueAgoal, blueBgoal):
    redtotal = redAgoal.get_total() + redBgoal.get_total()
    bluetotal = blueAgoal.get_total() + blueBgoal.get_total()

    if redtotal > bluetotal:
        owner = "red"
    elif bluetotal > redtotal:
        owner = "blue"
    else:
        owner = None

    return owner

def update_goals():
    for x in range(4):
        for y in range(9):
            tower = field[x][y]
            if x < 2:
                side = "red"
            else:
                side = "blue"
            goal = Goal(side, tower[0], tower[1], tower[2], False)
            goals[x][y] = goal

def update_ownerships():
    for x in range(3):
        for y in range(3):
            owner = ownership(goals[0][(3*x)+y], goals[1][(3*x)+y], goals[2][(3*x)+y], goals[3][(3*x)+y])
            owners[x][y] = owner

def update_tops():
    for x in range(4):
        for y in range(9):
            top = field[x][y][0]
            tops[x][y] = top

def check_valid_row(side_index, top_index1, top_index2, top_index3):
    valid_row = False
    
    toprow1, topcol1 = floor(top_index1/3 - 1), top_index1%3 - 1
    toprow2, topcol2 = floor(top_index2/3 - 1), top_index2%3 - 1
    toprow3, topcol3 = floor(top_index3/3 - 1), top_index3%3 - 1

    side = None
    if side_index < 2:
        side = "red"
    elif side_index >= 2 and side_index < 4:
        side = "blue"

    if owners[toprow1][topcol1] == owners[toprow2][topcol2] and owners[toprow2][topcol2] == owners[toprow3][topcol3]:
        if owners[toprow1][topcol1] == side:
            valid_row = True

    return valid_row
        

def update_score():
    red_total = 0
    blue_total = 0
    
    for x in range(len(goals)):
        for y in range(len(goals[x])):
            goal = goals[x][y]

            if x < 2:
                red_total += goal.get_total()
            else:
                blue_total += goal.get_total()

    for x in range(2):
        if check_valid_row(x, 1, 2, 3):
            red_total += 9
        if check_valid_row(x, 4, 5, 6):
            red_total += 9
        if check_valid_row(x, 7, 8, 9):
            red_total += 9
        if check_valid_row(x, 1, 4, 7):
            red_total += 9
        if check_valid_row(x, 2, 5, 8):
            red_total += 9
        if check_valid_row(x, 3, 6, 9):
             red_total += 9
        if check_valid_row(x, 1, 5, 9):
            red_total += 9
        if check_valid_row(x, 3, 5, 7):
            red_total += 9

    for x in range(3, 5):
        if check_valid_row(x, 1, 2, 3):
            print("1")
            blue_total += 9
        if check_valid_row(x, 4, 5, 6):
            print("2")
            blue_total += 9
        if check_valid_row(x, 7, 8, 9):
            print("3")
            blue_total += 9
        if check_valid_row(x, 1, 4, 7):
            print("4")
            blue_total += 9
        if check_valid_row(x, 2, 5, 8):
            print("5")
            blue_total += 9
        if check_valid_row(x, 3, 6, 9):
            print("6")
            blue_total += 9
        if check_valid_row(x, 1, 5, 9):
            print("7")
            blue_total += 9
        if check_valid_row(x, 3, 5, 7):
            print("8")
            blue_total += 9

        print(blue_total)
    print(str(red_total) + ", " + str(blue_total))
            
    
            
def update():
    update_goals()
    update_ownerships()
    update_tops()
    update_score()

def change_ball(x, y):
    ball_vals = [None, "red", "blue"]
    for i in range(3):
        for j in range(3):
            for k in range(1, 4):
                for l in range(4):
                    basei, basej = 280*j, 400*i
                    addi, addj = (140/3)*k, 100*l

                    x1 = basej+addj+30
                    y1 = basei+addi+(10/3)
                    x2 = basej+addj+70
                    y2 = basei+addi+(130/3)

                    if x > x1 and x < x2 and y > y1 and y < y2:
                        ball_val = field[l][(3*j)+i][k-1]
                        ball_val_cur_index = ball_vals.index(ball_val)
                        ball_val_cur_index += 1
                        field[l][(3*j)+i][k-1] = ball_vals[ball_val_cur_index%3]

                        draw()
                        
def formulate(event):
    x, y = event.x, event.y
    change_ball(x, y)
    update()

                        

                    
                    


master.bind("<Button-1>", formulate)









    
        
            

    

