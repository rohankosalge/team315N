/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       Rohan Kosalge                                             */
/*    Created:      Thursday, September 26, 2020                              */
/*    Description:  Competition Template                                      */
/*                                                                            */


// ---- START VEXCODE CONFIGURED DEVICES ----
// Robot Configuration:
// [Name]               [Type]        [Port(s)]
// leftFront            motor         9               
// leftBack             motor         15              
// rightFront           motor         19              
// rightBack            motor         8               
// TopRollers           motor         13              
// BottomRollers        motor         16              
// leftIntake           motor         2               
// rightIntake          motor         3               
// Controller1          controller                    
// InertialSensor       inertial      6               
// LineTrackerA         line          A               
// LineTrackerB         line          B               
// LineTrackerC         line          C               
// ---- END VEXCODE CONFIGURED DEVICES ----
#include "vex.h"
#include <string.h>
#include <math.h>

using namespace vex;

// A global instance of competition
competition Competition;

motor leftFront = motor(PORT9, ratio18_1, false);
motor leftBack = motor(PORT15, ratio18_1, true);
motor rightFront = motor(PORT19, ratio18_1, true);
motor rightBack = motor(PORT8, ratio18_1, false);
motor TopRollers = motor(PORT13, ratio6_1, false);
motor BottomRollers = motor(PORT16, ratio18_1, false);
motor leftIntake = motor(PORT2, ratio18_1, false);
motor rightIntake = motor(PORT3, ratio18_1, true);
inertial InertialSensor = inertial(PORT6);
motor_group leftDrive(leftBack, leftFront);
motor_group rightDrive(rightBack, rightFront);
motor_group intakes(leftIntake, rightIntake);
motor_group frontDrive(leftFront, rightFront);
motor_group backDrive(leftBack, rightBack);
controller Controller1 = controller();

// constants
const double SENSE = 0.45; // sensitivity
const double DRIVEP = 30;
const double DRIVEI = 1;
const double DRIVED = 0;
const double TURNP = 40;
const double TURNI = 1;
const double TURND = 0;
const double TURN_OFFSET = 2;
const int NUMDRIVEMOTORS = 4;
const long DRIVE_INTEGRAL_LIMIT = 2500;
const long DRIVE_PROP_LIMIT = 5000;
const double HEAD_OFFSET = 2;
const long OFFSET_VOLTAGE = 1500;

void assignDriveMotorsVoltage(double leftSide, double rightSide){
  leftFront.spin(forward, leftSide, vex::voltageUnits::mV);
  leftBack.spin(forward, leftSide, vex::voltageUnits::mV);
  rightFront.spin(forward, rightSide, vex::voltageUnits::mV);
  rightBack.spin(forward, rightSide, vex::voltageUnits::mV);
}

double getAverageVoltage(){
  return ( fabs(leftFront.voltage(vex::voltageUnits::mV)) + fabs(leftBack.voltage(vex::voltageUnits::mV))
           + fabs(rightFront.voltage(vex::voltageUnits::mV)) + fabs(rightBack.voltage(vex::voltageUnits::mV)) ) / NUMDRIVEMOTORS;
}

int getAverageTicks(){
  return ( fabs(leftFront.position(vex::rotationUnits::raw)) + fabs(leftBack.position(vex::rotationUnits::raw))
               + fabs(rightFront.position(vex::rotationUnits::raw)) + fabs(rightBack.position(vex::rotationUnits::raw)) ) / NUMDRIVEMOTORS;
}

void resetMotors(){
  leftFront.resetPosition();
  leftBack.resetPosition();
  rightFront.resetPosition();
  rightBack.resetPosition();
}

void stopMotors(){
  //assignDriveMotorsVoltage(0, 0);
  leftFront.stop(vex::brakeType::hold);
  leftBack.stop(vex::brakeType::hold);
  rightFront.stop(vex::brakeType::hold);
  rightBack.stop(vex::brakeType::hold);
}

void drivePID(long target_ticks){
  long integral; 
  long derivative;
  long error; 
  long prev_error;
  long prev_ticks;
  double prop_pct;
  double final_volt = 3000.0;
  long cur_ticks;

  error = 0;
  prev_error = 0;
  cur_ticks = 0;
  integral = 0;
  derivative = 0;
  prop_pct = 0;
  prev_ticks = 0;

  resetMotors();

  while(abs(cur_ticks) < abs(target_ticks)){
    
    error = abs(target_ticks)  - abs(cur_ticks);
    prop_pct = ((double) error / (double) abs(target_ticks)) * 100;
    derivative = error - prev_error;
    integral = integral + error;

    if(integral > DRIVE_INTEGRAL_LIMIT) {integral = DRIVE_INTEGRAL_LIMIT;}
    if(error > DRIVE_PROP_LIMIT) { error = DRIVE_PROP_LIMIT; }

    final_volt = (abs(target_ticks)/(target_ticks)) * ((DRIVEP * prop_pct) + (DRIVEI * integral) + (DRIVED * derivative));
    
    assignDriveMotorsVoltage(final_volt, final_volt);
    prev_error = error;
    prev_ticks = cur_ticks;
    wait(2, msec);
    cur_ticks = getAverageTicks();
   
  }
  stopMotors();
  //wait(100,msec);
  // Controller1.Screen.clearScreen();
  // Controller1.Screen.setCursor(0, 0);
  // Controller1.Screen.print("C =%d, P = %d", cur_ticks, prev_ticks);
  // Controller1.Screen.setCursor(2, 0);
  // Controller1.Screen.print("F = %d", getAverageTicks());
}

void drivePIDheading(long target_ticks, double head){
  long integral; 
  long derivative;
  long error; 
  long prev_error;
  long prev_ticks;
  double prop_pct;
  double final_volt = 3000.0;
  long cur_ticks;
  double compare_head = 0;

  error = 0;
  prev_error = 0;
  cur_ticks = 0;
  integral = 0;
  derivative = 0;
  prop_pct = 0;
  prev_ticks = 0;

  resetMotors();

  while(abs(cur_ticks) < abs(target_ticks)){
    compare_head = head;
    
    error = abs(target_ticks)  - abs(cur_ticks);
    prop_pct = ((double) error / (double) abs(target_ticks)) * 100;
    derivative = error - prev_error;
    integral = integral + error;

    if(integral > DRIVE_INTEGRAL_LIMIT) {integral = DRIVE_INTEGRAL_LIMIT;}
    if(error > DRIVE_PROP_LIMIT) { error = DRIVE_PROP_LIMIT; }

    final_volt = (abs(target_ticks)/(target_ticks)) * ((DRIVEP * prop_pct) + (DRIVEI * integral) + (DRIVED * derivative));
    
    double cur_head = InertialSensor.heading();

    if(fabs(head-cur_head) > 180){
      if (cur_head < head) {cur_head += 360;}
      else {compare_head += 360;}
    }

    if(fabs(compare_head-cur_head) > HEAD_OFFSET){
      if(compare_head > cur_head){
        // if the target heading is greater than the current heading, then slightly turn right
        assignDriveMotorsVoltage(final_volt+OFFSET_VOLTAGE, final_volt-OFFSET_VOLTAGE);
      }else{
        // if the target heading is less than the current heading, then slightly turn left
        assignDriveMotorsVoltage(final_volt-OFFSET_VOLTAGE, final_volt+OFFSET_VOLTAGE);
      }
    }else{
      assignDriveMotorsVoltage(final_volt, final_volt);
    }
    
    prev_error = error;
    prev_ticks = cur_ticks;
    wait(2, msec);
    cur_ticks = getAverageTicks();
   
  }
  stopMotors();
  //wait(100,msec);
  // Controller1.Screen.clearScreen();
  // Controller1.Screen.setCursor(0, 0);
  // Controller1.Screen.print("C =%d, P = %d", cur_ticks, prev_ticks);
  // Controller1.Screen.setCursor(2, 0);
  // Controller1.Screen.print("F = %d", getAverageTicks());
}

void turnPID(double turn_deg, bool is_right){
  // turn right if true, turn left if false

  double integral = 0;
  double derivative = 0;
  double error = 0;
  double prop_pct = 0;
  double prev_error = 0;
  double final_volt = 0;

  double cur_deg = InertialSensor.heading();
  double start_deg = cur_deg;
  double end_deg = 0;
  double prev_deg = cur_deg;
  bool switch_deg = false;
  bool keep_looping = true;

  if (is_right) {end_deg = start_deg + turn_deg;}
  else {end_deg = start_deg - turn_deg;}

  // Controller1.Screen.clearScreen();
  // Controller1.Screen.setCursor(0, 0);
  // Controller1.Screen.print("S: %f", start_deg);
  // Controller1.Screen.setCursor(2, 0);
  // Controller1.Screen.print("E: %f", end_deg);

  while(keep_looping){

    error = turn_deg - fabs(cur_deg - start_deg);
    prop_pct = (error/turn_deg) * 100;
    integral += error;
    derivative = error - prev_error;

    if(integral > DRIVE_INTEGRAL_LIMIT){
      integral = DRIVE_INTEGRAL_LIMIT;
    }

    final_volt = (TURNP * prop_pct) + (TURNI * integral) + (TURND * derivative);

    if(is_right){
      assignDriveMotorsVoltage(final_volt, -final_volt);
    }else{
      assignDriveMotorsVoltage(-final_volt, final_volt);
    }

    prev_error = error;
    prev_deg = cur_deg;
    wait(2, msec);

    cur_deg = InertialSensor.heading();

    if(fabs(cur_deg - prev_deg) > 100) {switch_deg = true;}

    if(switch_deg){
      if (is_right) {cur_deg += 360;}
      else {cur_deg -= 360;}
    }

    if(is_right){
      if (cur_deg >= start_deg-TURN_OFFSET && cur_deg <= end_deg) {keep_looping = true;}
      else {keep_looping = false;}
    }else{
      if (cur_deg <= start_deg+TURN_OFFSET && cur_deg >= end_deg) {keep_looping = true;}
      else {keep_looping = false;}
    }
    
  }
  stopMotors();
  //wait(500, msec);
  //InertialSensor.resetHeading();
  // Controller1.Screen.clearScreen();
  // Controller1.Screen.setCursor(0, 0);
  // Controller1.Screen.print("S: %f", start_deg);
  // Controller1.Screen.setCursor(2, 0);
  // Controller1.Screen.print("E: %f", end_deg);    
  // Controller1.Screen.setCursor(4, 0);
  // Controller1.Screen.print("C: %f", cur_deg);
}


void turnPIDheading(double head){
  double cur_head = InertialSensor.heading();

  // figures out which direction to turn and modifies the degrees
  if(fabs(head-cur_head) > 180){
    if (cur_head < head) {cur_head += 360;}
    else {head += 360;}
  }

  double deg = head-cur_head;

  if(deg < 0){
    // if the difference is negative, then we turn left
    turnPID(-deg, false);
  }else{
    // if the difference is positive, then we turn right
    turnPID(deg, true);
  }

  Controller1.Screen.clearScreen();
  Controller1.Screen.setCursor(0, 0);
  Controller1.Screen.print("C: %f", cur_head);
  Controller1.Screen.setCursor(2, 0);
  Controller1.Screen.print("T: %f", head);
}


void rforward(long ticks){
  drivePID(ticks);
}

void rback(long ticks){
  drivePID(-ticks);
}

void rright(double deg){
  turnPID(deg, true);
}

void rleft(double deg){
  turnPID(deg, false);
}

void rturn(double head){
  turnPIDheading(head);
}

void rdrive(double ticks){
  drivePIDheading(ticks, InertialSensor.heading());
}

bool is_launching = false;
bool is_pooping = false;

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the V5 has been powered on and        */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void calibrateGyro(){
  // calibrate the inertial sensor
  InertialSensor.calibrate();
  while(InertialSensor.isCalibrating()){
    wait(100, msec);
  }
  InertialSensor.resetHeading();
}

void pre_auton(void) {
  // Initializing Robot Configuration. DO NOT REMOVE!
  vexcodeInit();

  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
  calibrateGyro();
}

/*---------------------------------------------------------------------------*/
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

void reset_motors(){
  leftFront.resetPosition();
  leftBack.resetPosition();
  rightFront.resetPosition();
  rightBack.resetPosition();
}

void controller_screen_update(int cursorX, int cursorY, std::string msg, bool rumble){
  // call this function after every robot function
  // so that the driver knows what is going on

  Controller1.Screen.clearLine();
  Controller1.Screen.clearScreen();
  Controller1.Screen.setCursor(cursorX, cursorY);
  //Controller1.Screen.print(msg);
  if(rumble==true){
    Controller1.rumble("-----");
  }
}

void launch_rollers(double seconds){
  TopRollers.spin(forward, 100, pct);
  BottomRollers.spin(forward, 100, pct);
  wait(seconds, sec);
  TopRollers.stop();
  BottomRollers.stop();
}

void run_intakes(){
  intakes.spin(forward, 100, pct);
  //controller_screen_update(0, 0, "Intaking...", false);
}

void stop_intakes(){
  // stop intakes and bottom rollers (if they were running)
  intakes.stop();
  BottomRollers.stop();
  //controller_screen_update(0, 0, "Intakes stopped.", false);
}

void start_intakes(int rollers_vel){
  intakes.spin(forward, 100, pct);
  BottomRollers.spin(forward, rollers_vel, pct);
  //controller_screen_update(0, 0, "Intaking...", false);
}

void formulate(int vel, int ms){
  // only move top rollers back for a small time
  TopRollers.spin(reverse, vel, pct);
  wait(ms, msec);
  TopRollers.stop();
  TopRollers.spin(forward, vel, pct);
  wait(ms+100, msec);
  TopRollers.stop();
}

void autonomous(void) {
  // ..........................................................................
  // Insert autonomous user code here.

  // unfold hood
  formulate(70, 200);

  // get the ball in front, turn to the corner tower and launch preload.
  start_intakes(0);
  rdrive(750);
  stop_intakes();
  rturn(243);
  rdrive(1300);
  launch_rollers(0.75);

  // turn away from the corner tower, move to edge tower and 
  // launch the ball that was previously acquired.
  rdrive(-100);
  rturn(230);
  start_intakes(100);
  rdrive(-750);
  stop_intakes();
  rturn(265);
  rdrive(-2100);
  //rback(2100);
  rturn(181);
  rdrive(250);
  launch_rollers(1);

  // move back and turn away from edge tower, get ball in front
  // and turn to the corner tower, using that ball to launch in.
  rdrive(-200);
  rturn(94);
  start_intakes(90);
  rdrive(2400);
  rturn(132);
  stop_intakes();
  rdrive(600);
  launch_rollers(1);

  // move back from corner, turn and move to the second edge tower
  // get the ball there, turn and launch it in
  rdrive(-815);
  rturn(0);
  start_intakes(100);
  rdrive(2150);
  //rback(100);
  //rback(300);
  //wait(375, msec);
  rturn(90);
  stop_intakes();
  rdrive(250);
  launch_rollers(1);

  // move back from edge tower, move forward so that robot is perpendicular
  // to the ball on the wall, then turn and move forward to get it
  rdrive(-250);
  rturn(0);
  rdrive(1800);
  //rforward(1800);
  rturn(87);
  start_intakes(100);
  rdrive(470);

  // move back, turn and move to the corner tower and launch ball
  rdrive(-470);
  rturn(35);
  stop_intakes();
  rdrive(1050);
  launch_rollers(1);

  // move back from corner tower, turn and move to the ball in front
  // launch acquired ball into edge tower
  rdrive(-450);
  rturn(273);
  start_intakes(90);
  rdrive(2900);
  stop_intakes();
  rturn(0);
  rdrive(200);
  launch_rollers(1);
  
  // move back from edge tower, turn and move to the next ball in front,
  // launch that ball into the following corner tower
  rdrive(-300);
  rturn(273);
  start_intakes(90);
  rdrive(2400);
  stop_intakes();
  rturn(308);
  rdrive(650);
  launch_rollers(1);

  // move back from corner tower, turn and move to the ball in front
  // get ball, turn to final edge tower and shoot
  rdrive(-550);
  rturn(182);
  start_intakes(100);
  rdrive(2850);
  rdrive(-100);
  //wait(375, msec);
  stop_intakes();
  rturn(268);
  rdrive(220);
  launch_rollers(1);



  
  // middle tower






  

  



  // ..........................................................................
}

/*--------------------------------------------------------------------------------*/
/*                                                                                */
/*                               User Control Task                                */
/*                                                                                */
/*   This task is used to control your robot during the user control phase of     */
/*   a VEX Competition.                                                           */
/*                                                                                */
/*   BETWEEN THIS COMMENT AND THE USERCONTROL VOID ARE THE CONTROLLER FUNCTIONS.  */
/*--------------------------------------------------------------------------------*/

// USER FUNCTIONS

void user_formulate(){
  formulate(20, 375);
}

void user_start_intakes(){
  // start intakes and bottom rollers 50% velocity
  start_intakes(50);
}

void reverse_intakes(){
  // reverse intakes (outtakes)
  intakes.spin(reverse, 100, pct);
  controller_screen_update(0, 0, "Reversing intakes...", false);
}

void user_launch_rollers(){
  // move top rollers forward, bottom rollers forward
  TopRollers.spin(forward, 100, pct);
  BottomRollers.spin(forward, 100, pct);

  Controller1.Screen.clearLine();
  Controller1.Screen.clearScreen();
  Controller1.Screen.setCursor(0, 0);
  Controller1.Screen.print("Rollers are launching");
}

void user_poop_rollers(){
  // move top rollers back, bottom roller forward
  TopRollers.spin(reverse, 100, pct);
  BottomRollers.spin(forward, 100, pct);
  
  Controller1.Screen.clearLine();
  Controller1.Screen.clearScreen();
  Controller1.Screen.setCursor(0, 0);
  Controller1.Screen.print("Rollers are pooping");
}

void user_stop_rollers(){
  TopRollers.stop();
  BottomRollers.stop();
}

void gyrolog(){
  // list all gyro stats on the controller and then reset the gyro positions. 

  double gyro_heading = InertialSensor.heading(vex::rotationUnits::deg);
  double gyro_ticks = leftFront.position(vex::rotationUnits::raw);

  Controller1.Screen.clearScreen();
  Controller1.Screen.setCursor(0, 0);

  Controller1.Screen.print("Head: %f", gyro_heading);
  Controller1.Screen.setCursor(2, 0);
  Controller1.Screen.print("Ticks: %f", gyro_ticks);

  //InertialSensor.setHeading(0, vex::rotationUnits::deg);
  reset_motors();

}

void usercontrol(void) {
  // User control code here, inside the loop
  while (1) {
    // This is the main execution loop for the user control program.
    // Each time through the loop your program should update motor + servo
    // values based on feedback from the joysticks.

    // ........................................................................
    // Insert user code here. This is where you use the joystick and button values to
    // update your motors, etc.
    // ........................................................................

    int drivePos = Controller1.Axis3.position(percent); // get the driving position (in percent value)
    int turnPos = Controller1.Axis1.position(percent);  // get the turning position (in percent value)

    // use the SCALE constant to reduce the impact of the turn
    float scaledTurnPos = ((turnPos * 100) * SENSE) / 100;
    float leftMtrVals = (drivePos + scaledTurnPos);
    float rightMtrVals = -(scaledTurnPos - drivePos);

    // motor threshold

    if(leftMtrVals > 100){
        leftMtrVals = 100;
    }
    if(leftMtrVals < -100){
        leftMtrVals = -100;
    }
    if(rightMtrVals > 100){
        rightMtrVals = 100;
    }
    if(rightMtrVals < -100){
        rightMtrVals = -100;
    }

    //leftDrive.spin(forward, leftMtrVals, pct);
    //rightDrive.spin(forward, rightMtrVals, pct);

    // Sleep the task for a short amount of time to prevent wasted resources.
    wait(1, msec); 
  }
}

// Main will set up the competition functions and callbacks.
int main() {
  calibrateGyro();

  Controller1.ButtonL2.pressed(stop_intakes);
  Controller1.ButtonR2.pressed(user_start_intakes);
  Controller1.ButtonA.pressed(user_poop_rollers);
  Controller1.ButtonR1.pressed(user_launch_rollers);
  Controller1.ButtonY.pressed(reverse_intakes);
  Controller1.ButtonL1.pressed(user_stop_rollers);
  Controller1.ButtonX.pressed(user_formulate);
  Controller1.ButtonB.pressed(gyrolog);
  
  // Set up callbacks for autonomous and driver control periods.
  Competition.autonomous(autonomous);
  Competition.drivercontrol(usercontrol);

  // Run the pre-autonomous function.
  pre_auton();

  // Prevent main from exiting with an infinite loop.
  while (true) {
    wait(100, msec);
  }
}
